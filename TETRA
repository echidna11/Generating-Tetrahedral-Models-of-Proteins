import numpy as N
import chimerax
from chimerax.core.models import Model
mlist = session.models.list()
m = mlist[0] 
ma = m.atoms
man = ma.names
indices_C=[]
indices_N=[]
indices_CB=[]
indices_CA=[]


for i in range(len(man)):
  if(man[i]=="CA"):
    indices_N.append(i-1)
    indices_CA.append(i)
    indices_C.append(i+1)
    indices_CB.append(i+3)
    

coords_N=ma.coords[indices_N]
coords_CA=ma.coords[indices_CA]
coords_C=ma.coords[indices_C]
coords_CB=ma.coords[indices_CB]

fcoords_CA = N.array(4*coords_CA)

coords_H = N.array(fcoords_CA) - N.array(coords_N) - N.array(coords_CB) - N.array(coords_C)

def dis_coords(coords_A,coords_B):
    val=[]
    for i in range(len(coords_A)):
        val.append(coords_A[i]-coords_B[i])
    dis=[]
    for i in range(len(coords_A)):
        xd=(val[i][0])**2
        yd=(val[i][1])**2
        zd=(val[i][2])**2
        dis.append((xd+yd+zd)**0.5)
    return dis
"""
def optimal_poc():   #finds out the point of connection between two adjacent tetrahedrons.
    #it figures out the min distance b/w vectors of CA-C AND CA-N, and takes the mid point of the points at which this min distance occurs.
    #the results were not as expected as it further irregularised the tetrahedra which does make sense in hindsight.

    for i in range(len(coords_C)-1):
        a=coords_C[i]-coords_CA[i]
        b=coords_N[i+1]-coords_CA[i+1]

        v=N.cross(a,b)
        v=-v
        
        j=N.array([coords_CA[i]-coords_C[i],coords_CA[i+1]-coords_N[i+1],-v])
        k=N.array([coords_CA[i][0]-coords_CA[i+1][0],coords_CA[i][1]-coords_CA[i+1][1],coords_CA[i][2]-coords_CA[i+1][2]])

        res=N.linalg.solve(j, k)
        l1=res[0]
        l2=res[1]
        
        coords_C[i][0]=coords_CA[i][0]+l1*(coords_C[i][0]-coords_CA[i][0])
        coords_C[i][1]=coords_CA[i][1]+l1*(coords_C[i][1]-coords_CA[i][1])
        coords_C[i][2]=coords_CA[i][2]+l1*(coords_C[i][2]-coords_CA[i][2])

        coords_N[i+1][0]=coords_CA[i+1][0]+l1*(coords_N[i+1][0]-coords_CA[i+1][0])
        coords_N[i+1][1]=coords_CA[i+1][1]+l1*(coords_N[i+1][1]-coords_CA[i+1][1])
        coords_N[i+1][2]=coords_CA[i+1][2]+l1*(coords_N[i+1][2]-coords_CA[i+1][2])

"""
def dis2_coords(a,b):
    xd=(a[0]-b[0])**2
    yd=(a[1]-b[1])**2
    zd=(a[2]-b[2])**2
    return ((xd+yd+zd)**0.5)



#optimal_poc()
mid=(coords_C[0]+coords_N[0+1])/2
coords_C[0]=mid
coords_N[0+1]=mid
colors=[]

val=[255,255,25,255]
colors.append(val)
track=0
for i in range(1,len(coords_N)-1):
    mid=(coords_C[i]+coords_N[i+1])/2
    track+=1
    if (dis2_coords(coords_CA[i],mid)<=3*dis2_coords(coords_CA[i-1],coords_C[i-1])):
        coords_C[i]=mid
        coords_N[i+1]=mid
    else:
        if(track%2==0):
            val=[255,25,255,255]
        else:
            val=[255,255,25,255]
    colors.append(val)
dis1=dis_coords(coords_CA,coords_CB)
dis2=dis_coords(coords_CA,coords_H)
dis3=dis_coords(coords_CA,coords_C)
dis4=dis_coords(coords_CA,coords_N)


median=N.median(dis3+dis4)

median_old=N.median(dis1+dis2+dis3+dis4)
rgba=[255,255,10,255]
old_len_e1=dis_coords(coords_C,coords_H)
old_len_e2=dis_coords(coords_C,coords_CB)
old_len_e3=dis_coords(coords_N,coords_CB)
old_len_e4=dis_coords(coords_N,coords_H)
old_len_e5=dis_coords(coords_N,coords_C)
old_len_e6=dis_coords(coords_H,coords_CB)

def regularize(d_arr, coords_X, coords_Y, median): 
    for i in range(len(d_arr)):
        r=median/d_arr[i]
        coords_X[i][0]=(coords_X[i][0]-coords_Y[i][0])*r + coords_Y[i][0]
        coords_X[i][1]=(coords_X[i][1]-coords_Y[i][1])*r + coords_Y[i][1]
        coords_X[i][2]=(coords_X[i][2]-coords_Y[i][2])*r + coords_Y[i][2]
        

regularize(dis1, coords_CB, coords_CA, median)
regularize(dis2, coords_H,coords_CA, median)

j=0
def tetrahedra_model(va, na, indices,x,colors):

    from chimerax.graphics import Drawing
    t = Drawing('tetrahedras')
    

    for i in indices:
        ta = N.array([[0, 1, 2], [0, 2, 3], [0, 3, 1], [2, 1, 3]])
        p = t.new_drawing(str(i))
        if(x<len(colors)):
            p.set_color(colors[x])
        p.set_geometry(va, na, ta)
        
    print(t.get_colors())
    return t

def generate_structure(model, coords_C, coords_CB, coords_H, coords_N,colors):
    t={}
    from chimerax.graphics import Drawing
    
    
    for i in range(0, len(coords_N)):
        va = N.array([coords_C[i], coords_CB[i], coords_H[i], coords_N[i]])
        
        na = va 
        t[i] = tetrahedra_model(va, na, [0],i,colors)
        

    for i in range(0, len(coords_N)):
        model.add([t[i]])


def 
#updating lengths
dis1=dis_coords(coords_CA,coords_CB)
dis2=dis_coords(coords_CA,coords_H)
dis3=dis_coords(coords_CA,coords_C)
dis4=dis_coords(coords_CA,coords_N)

median=[N.median(dis1),N.median(dis2),N.median(dis3),N.median(dis4)]
#new median
median_new=N.median(dis1+dis2+dis3+dis4)

m0 = Model('m0', session)
generate_structure(m0, coords_C, coords_CB, coords_H, coords_N,colors)
session.models.add([m0])

#print( median_old,"---->",median_new)


def printEdgeLength():
    len_e1=dis_coords(coords_C,coords_H)
    len_e2=dis_coords(coords_C,coords_CB)
    len_e3=dis_coords(coords_N,coords_CB)
    len_e4=dis_coords(coords_N,coords_H)
    len_e5=dis_coords(coords_N,coords_C)
    len_e6=dis_coords(coords_H,coords_CB)

    print(N.median(old_len_e1),"--->",N.median(len_e1))
    print(N.median(old_len_e2),"--->",N.median(len_e2))
    print(N.median(old_len_e3),"--->",N.median(len_e3))
    print(N.median(old_len_e4),"--->",N.median(len_e4))
    print(N.median(old_len_e4),"--->",N.median(len_e4))
    print(N.median(old_len_e4),"--->",N.median(len_e4))

printEdgeLength()

'''
print(N.median(dis1))
print(N.median(dis2))
print(N.median(dis3))
print(N.median(dis4))
'''